{
  "name": "grunt-traceur-simple",
  "homepage": "http://github.com/rse/grunt-traceur-simple",
  "description": "Grunt Task for ECMAScript 6 to ECMAScript 5 Transpiling with Traceur",
  "version": "0.9.6",
  "license": "MIT",
  "author": {
    "name": "Ralf S. Engelschall",
    "email": "rse@engelschall.com",
    "url": "http://engelschall.com"
  },
  "keywords": [
    "gruntplugin",
    "traceur",
    "ecmascript",
    "es6",
    "transpiler",
    "es5"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/rse/grunt-traceur-simple.git"
  },
  "bugs": {
    "url": "http://github.com/rse/grunt-traceur-simple/issues"
  },
  "main": "Gruntfile.js",
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-eslint": "~0.4.0"
  },
  "dependencies": {
    "chalk": ">=0.4.0",
    "traceur": ">=0.0.33"
  },
  "peerDependencies": {
    "grunt": ">=0.4.4"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "\n# grunt-traceur-simple\n\nGrunt task that uses the Google Traceur compiler\nto transpile source files from [ECMAScript 6](https://code.google.com/p/traceur-compiler/wiki/LanguageFeatures)\nto ECMAScript 5 syntax. It supports the passing of arbitrary Traceur\noptions and the use of either the dependent Traceur version or an\narbitrary peer-installed Traceur version.\n\nThe independence of the Traceur internals (which options are supported)\nand the independence of the Traceur version is _the_ killer feature of this\nGrunt plugin -- in contrast to similar Grunt Traceur integration plugins.\n\n<p/>\n<img src=\"https://nodei.co/npm/grunt-traceur-simple.png?downloads=true&stars=true\" alt=\"\"/>\n\n<p/>\n<img src=\"https://david-dm.org/rse/grunt-traceur-simple.png\" alt=\"\"/>\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/)\nbefore, be sure to check out the [Getting\nStarted](http://gruntjs.com/getting-started) guide, as it explains how\nto create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as\ninstall and use Grunt plugins. Once you're familiar with that process,\nyou may install this plugin with this command:\n\n```shell\nnpm install grunt-traceur-simple --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your\nGruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks(\"grunt-traceur-simple\");\n```\n\n### Options\n\n- `traceurRuntime`:\n  The path to the `traceur-runtime.js` file of Traceur. It can be\n  usually found in the path `bin/traceur-runtime.js` of\n  a Traceur distribution. The default is the path to the\n  `traceur-runtime.js` file of the dependent `traceur` module. Use\n  `path.resolve(path.join(__dirname, \"node_modules/traceur/bin/traceur-runtime.js\"))` if you\n  want to use a peer-installed Traceur.\n\n- `traceurCommand`:\n  Either the path to the `traceur` executable of a Traceur installation\n  or distribution or the path to the `src/node/command.js`\n  file of a Traceur distribution. The default is the path to\n  the `command.js` file of the dependent `traceur` module. Use\n  `path.resolve(path.join(__dirname, \"node_modules/traceur/src/node/command.js\"))` if you want\n  to use a peer-installed Traceur.\n\n- `traceurOptions`:\n  The additional command-line options passed to the `traceur`\n  executable. Usually used to enable or disable certain transpiling\n  options. The default is `\"\"`. Use, e.g., `--experimental\n  --source-maps` for enabling all experimental transpiling features and\n  generate a source-map file.\n\n- `includeRuntime`:\n  Set to `true` for including the Traceur runtime (see `traceurRuntime`\n  for the path) into the generated output file. Alternatively install\n  the Twitter Bower component `traceur-runtime` with `bower install\n  traceur-runtime` and load its `traceur-runtime.js` yourself in the\n  application. Dependending of the used ECMAScript 6 funtionality\n  in the code, this runtime is needed or not.\n\n## Task Calling\n\n_Run this task with the `grunt traceur` command._\n\nTask targets, files and options may be specified according to the Grunt\n[Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n## Usage Example\n\nAssuming we have the following build environment:\n\n- `Gruntfile.js`:\n\n```js\n// [...]\ngrunt.initConfig({\n    traceur: {\n        options: {\n            includeRuntime: true,\n            traceurOptions: \"--experimental --source-maps\"\n        },\n        \"app\": {\n            files: {\n                \"out/app.js\": [ \"src/**/*.js\" ]\n            }\n        }\n    }\n});\ngrunt.registerTask(\"default\", [ \"traceur\" ]);\n// [...]\n```\n\nThen running `grunt traceur` is functionality-wise somewhat equivalent\nto running `traceur --experimental --source-maps --out out/app.js src/*.js`.\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-traceur-simple@0.9.6",
  "_from": "grunt-traceur-simple@"
}
